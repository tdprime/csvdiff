Motivated by https://aswinkarthik.github.io/csvdiff/

# Requirements:

- compare schema (by header row)
	- unordered: columns added and removed
		- set operations
	- ordered: column moved
		- traditional diff on two lists

- compare data
	- do better than line compare
	- compare with schema
	- ordered: rows remade to schema
		- traditional diff on rows
	- unordered: perhaps with key (ordered subset)
		- database operations
	- each pair of rows compared, score by # matched fields

- highlighting
	- coloured, similar to colordiff
	- highlight changes within a row
		- colourize whole column
		- additional highlight specific character range


# Comments about difflib:

The thing that is not obvious from the documentation, SequenceMatcher is the
real work-horse.  All the diff output styles are build using that.

The method to focus on is, get_opcodes().  This provides the list of actions to
transform seq1 into seq2 -- the diffs.

See the source to see examples,
	find /opt/local/Library/ -name difflib.py

Also interesting are the helper functions for ndiff().  This demonstrates
using SequenceMatcher for showing diffs within lines.


# Some speed metrics:

I was concerned about the speed of my algorithm when replace sets get large.
Taking two dissimlar files, I did a few tests.

	simple_replace: ~70ms
	fancy_replace: ~3.5s
	fancy w/cache: 3.7-5.2s
	difflib.ndiff: >3min

Obviously, ndiff has serious problems. Since that was the motivation for the
new code, I am lucky that my CSV row score is working well enough.
